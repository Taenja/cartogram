})
) %>%
ee$FeatureCollection()
collection_with_prop %>%
ee$FeatureCollection$toList(nrow(collection)) %>%
ee$List$zip(prop_to_add) %>% # Pairs the elements of two lists to create a list of two-element lists
ee$List$map(
ee_utils_pyfunc(function(l){
lpair <- ee$List(l)
ee$Feature(lpair$get(0))$set('site_no', lpair$get(1))
})
) %>%
ee$FeatureCollection()
# Add properties in the server-side (using zip)
geom_with_prop <- sf_as_ee(collection$geometry)
prop_to_add <- collection$site_no %>% ee$List()
collection_with_prop <- geom_with_prop %>%
ee$FeatureCollection$toList(nrow(collection)) %>%
ee$List$zip(prop_to_add) %>% # Pairs the elements of two lists to create a list of two-element lists
ee$List$map(
ee_utils_pyfunc(function(l){
lpair <- ee$List(l)
ee$Feature(lpair$get(0))$set('site_no', lpair$get(1))
})
) %>%
ee$FeatureCollection()
ee_as_sf(collection_with_prop)
library(rgee)
library(dplyr)
library(readr)
collection <- read_rds("/home/csaybar/Downloads/polygons.rds")
# Simple solution
collection_with_prop <- collection %>% st_as_sf() %>% sf_as_ee()
# Add properties in the server-side (using ee$List$zip)
geom_with_prop <- sf_as_ee(collection$geometry)
prop_to_add <- collection$site_no %>% ee$List()
collection_with_prop <- geom_with_prop %>%
ee$FeatureCollection$toList(nrow(collection)) %>%
ee$List$zip(prop_to_add) %>% # Pairs the elements of two lists to create a list of two-element lists
ee$List$map(
ee_utils_pyfunc(function(l){
lpair <- ee$List(l)
ee$Feature(lpair$get(0))$set('site_no', lpair$get(1))
})
) %>%
ee$FeatureCollection()
collection
collection["site_no"]
collection[c("site_no", "geometry")]
# Simple solution
collection_with_prop <- collection[c("site_no", "geometry")] %>%
st_as_sf() %>%
sf_as_ee()
collection_with_prop
ee_as_sf(collection_with_prop)
# Add properties in the server-side (using ee$List$zip)
geom_with_prop <- sf_as_ee(collection$geometry)
prop_to_add <- collection$site_no %>% ee$List()
collection_with_prop <- geom_with_prop %>%
ee$FeatureCollection$toList(nrow(collection)) %>%
ee$List$zip(prop_to_add) %>% # Pairs the elements of two lists to create a list of two-element lists
ee$List$map(
ee_utils_pyfunc(function(l){
lpair <- ee$List(l)
ee$Feature(lpair$get(0))$set('site_no', lpair$get(1))
})
) %>%
ee$FeatureCollection()
ee_as_sf(collection_with_prop)
library(future)
sampler <- function(){
for(s in 1:10000) sample(1000000)
}
library(future)
sampler <- function(){
for(s in 1:10000) sample(1000000)
}
plan(multiprocess)
for(i in 1:100){
message(i)
if(i == 50){
mySamples <- future({ sampler() })
}
}
mySamples
mySamples
mySamples
mySamples
value(mySamples)
future::autoStopCluster()
parallel::stopCluster(cl = cl)
parallel::stopCluster()
parallel::stopCluster(multiprocess)
parallel::stopCluster(plan)
mySamples
value(mySamples)
library(rgee)
ee_Initialize()
ee_models <- ee$ImageCollection("NASA/NEX-DCP30")
ee_models <- ee$ImageCollection("NASA/NEX-DCP30") %>%
ee$ImageCollection$filterDate("2007-01-01", "2008-01-01")
ee_models
ee_models <- ee$ImageCollection("NASA/NEX-DCP30") %>%
ee$ImageCollection$filterDate("2007-01-01", "2008-01-01") %>%
ee$ImageCollection$select("pr")
ee_models <- ee$ImageCollection("NASA/NEX-DCP30") %>%
ee$ImageCollection$filterDate("2007-01-01", "2008-01-01") %>%
ee$ImageCollection$select("tasmax")
ee_models
ee_models
geo <- mapedit::editMap()
geo
ee_extract(ee_models, geo, scale = 1000)
ee_models
geo
ee_models <- ee$ImageCollection("NASA/NEX-DCP30") %>%
ee$ImageCollection$filterDate("2007-01-01", "2008-01-01") %>%
ee$ImageCollection$select("tasmax")
geo
geo$geometry %>% sf_as_ee()
ee_geo <- geo$geometry %>% sf_as_ee()
ee_geo
ee_models <- ee$ImageCollection("NASA/NEX-DCP30") %>%
ee$ImageCollection$filterDate("2007-01-01", "2008-01-01") %>%
ee$ImageCollection$filterBounds(ee_geo) %>%
ee$ImageCollection$select("tasmax")
ee_models
ee_extract(ee_models, geo, scale = 1000)
ee_models$size()$getInfo()
ee_models <- ee$ImageCollection("NASA/NEX-DCP30") %>%
ee$ImageCollection$filterDate("2007-01-01", "2010-01-01") %>%
ee$ImageCollection$filterBounds(ee_geo) %>%
ee$ImageCollection$select("tasmax")
ee_models$size()$getInfo()
ee_models <- ee$ImageCollection("NASA/NEX-DCP30") %>%
ee$ImageCollection$filterDate("2017-01-01", "2018-01-01") %>%
ee$ImageCollection$filterBounds(ee_geo) %>%
ee$ImageCollection$select("tasmax")
ee_models$size()$getInfo()
ee_models <- ee$ImageCollection("NASA/NEX-DCP30") %>%
ee$ImageCollection$filterDate("2017-01-01", "2018-01-01")
ee_models$size()$getInfo()
ee_models <- ee$ImageCollection("NASA/NEX-DCP30") %>%
ee$ImageCollection$filterDate("2017-01-01", "2018-01-01") %>%
ee$ImageCollection$filterBounds(ee_geo)
ee_models$size()$getInfo()
ee_models <- ee$ImageCollection("NASA/NEX-DCP30") %>%
ee$ImageCollection$filterDate("2017-01-01", "2018-01-01") %>%
ee$ImageCollection$select("tasmax")
ee_models$size()$getInfo()
ee_models <- ee$ImageCollection("NASA/NEX-GDDP") %>%
ee$ImageCollection$filterDate("2017-01-01", "2018-01-01") %>%
ee$ImageCollection$filterBounds(ee_geo) %>%
ee$ImageCollection$select("tasmax")
ee_models$size()$getInfo()
ee$ImageCollection$filterMetadata
ee_models <- ee$ImageCollection("NASA/NEX-GDDP") %>%
ee$ImageCollection$filterDate("2017-01-01", "2018-01-01") %>%
ee$ImageCollection$filterBounds(ee_geo) %>%
ee$ImageCollection$select("tasmax") %>%
ee$ImageCollection$filterMetadata("model", "equals", "ACCESS1-0")
ee_models$size()$getInfo()
ee_models <- ee$ImageCollection("NASA/NEX-GDDP") %>%
ee$ImageCollection$filterDate("2017-01-01", "2018-01-01") %>%
ee$ImageCollection$filterBounds(ee_geo) %>%
ee$ImageCollection$select("tasmax") %>%
ee$ImageCollection$filterMetadata("model", "equals", "ACCESS1-0") %>%
ee$ImageCollection$filterMetadata("scenario", "equals", "rcp85")
ee_models$size()$getInfo()
ee_models <- ee$ImageCollection("NASA/NEX-GDDP") %>%
ee$ImageCollection$filterDate("2017-01-01", "2018-01-01") %>%
ee$ImageCollection$filterBounds(ee_geo) %>%
ee$ImageCollection$select("tasmax") %>%
ee$ImageCollection$filterMetadata("model", "equals", "ACCESS1-0") %>%
ee$ImageCollection$filterMetadata("scenario", "equals", "rcp85")
geo
ee_extract(ee_models, ee_geo, scale = 1000)
ee_models <- ee$ImageCollection("NASA/NEX-GDDP") %>%
ee$ImageCollection$filterDate("2017-01-01", "2018-01-01") %>%
ee$ImageCollection$filterBounds(ee_geo) %>%
ee$ImageCollection$select("tasmax") %>%
ee$ImageCollection$filterMetadata("model", "equals", "ACCESS1-0") %>%
ee$ImageCollection$filterMetadata("scenario", "equals", "rcp85") %>%
ee$ImageCollection$mean()
ee_extract(ee_models, ee_geo, scale = 1000)
library(tmap)
data("World")
World
dim(World)
World
World$geometry
plot(World$geometry)
library(SF)
library(sf)
World
World
st_transform(World)
st_transform(World)
st_transform(World, 4326)
st_transform(World, 4326) %>% lapply(class)
World <- st_transform(World, 4326)
World
plot(World$geometry)
World$geometry
World$geometry
World$geometry
World <- st_transform(World, 4326) %>% sf_as_ee()
World
Map$addLayer(World)
World$geometry
data("World")
ee_world <- st_transform(World$geometry, 4326) %>% sf_as_ee()
Map$addLayer(World)
Map$addLayer(ee_world)
World
World$name
World$name == "Antarctica"
World[!(World$name == "Antarctica"),]
data("World")
World <- World[!(World$name == "Antarctica"),]
ee_world <- st_transform(World$geometry, 4326) %>% sf_as_ee()
Map$addLayer(ee_world)
ee_world
ee_models <- ee$ImageCollection("NASA/NEX-GDDP") %>%
ee$ImageCollection$filterDate("2017-01-01", "2018-01-01") %>%
ee$ImageCollection$filterBounds(ee_world) %>%
ee$ImageCollection$select("tasmax") %>%
ee$ImageCollection$filterMetadata("model", "equals", "ACCESS1-0") %>%
ee$ImageCollection$filterMetadata("scenario", "equals", "rcp85") %>%
ee$ImageCollection$mean()
year_tp_data <- ee_extract(ee_models, ee_geo, scale = 1000)
year_tp_data
ee_geo
year_tp_data <- ee_extract(ee_models, ee_world, scale = 1000)
library(plotly)
library(cartogram)
library(albersusa)
library(scales)
library(sf)
us_cont <- cartogram_cont(usa_sf("laea"), "pop_2014")
plot_ly(st_cast(us_cont, "POLYGON")) %>%
add_sf(
color = ~pop_2014,
split = ~name,
span = I(1),
text = ~paste(name, scales::number_si(pop_2014)),
hoverinfo = "text",
hoveron = "fills"
) %>%
layout(showlegend = FALSE) %>%
colorbar(title = "Population \n 2014")
plot_ly(st_cast(us_cont, "POLYGON")) %>%
add_sf(
color = ~pop_2014,
split = ~name,
span = I(1),
text = ~paste(name, scales::number_si(pop_2014)),
hoverinfo = "text",
hoveron = "fills"
) %>%
layout(showlegend = FALSE) %>%
colorbar(title = "Population \n 2014")
plot_ly(st_cast(us_cont, "POLYGON")) %>%
add_sf(
color = ~pop_2014,
split = ~name,
span = I(1),
text = ~paste(name, scales::number_si(pop_2014)),
hoverinfo = "text",
hoveron = "fills"
) %>%
layout(showlegend = FALSE) %>%
colorbar(title = "Population \n 2014")
st_cast(us_cont, "POLYGON")
plot_ly(st_cast(us_cont, "POLYGON")) %>%
add_sf(
color = ~pop_2014,
split = ~name,
span = I(1),
text = ~paste(name, scales::number_si(pop_2014)),
hoverinfo = "text",
hoveron = "fills"
) %>%
layout(showlegend = FALSE) %>%
colorbar(title = "Population \n 2014")
library(plotly)
library(cartogram)
library(albersusa)
library(plotly)
library(scales)
library(sf)
us_cont <- cartogram_cont(usa_sf("laea"), "pop_2014")
library(plotly)
library(cartogram)
library(albersusa)
us_cont <- cartogram_cont(usa_sf("laea"), "pop_2014")
r2d3::r2d3("Documents/Github/cartogram/previewd3.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
library(r2d3)
bars <- c(10, 20, 30)
library(r2d3)
r2d3(
data = c (0.3, 0.6, 0.8, 0.95, 0.40, 0.20),
script = system.file("examples/barchart.js", package = "r2d3")
)
system.file("examples/barchart.js", package = "r2d3")
setwd("/home/csaybar/Documents/Github/cartogram/js/")
list.files()
list.files(full.names = TRUE)
list.files(full.names = TRUE)
r2d3(
data = c (0.3, 0.6, 0.8, 0.95, 0.40, 0.20),
script = "./main.js",
dependencies = list.files(full.names = TRUE)
)
r2d3(
data = c (0.3, 0.6, 0.8, 0.95, 0.40, 0.20),
script = "./main.js",
dependencies = list.files(full.names = TRUE)
)
r2d3(
data = c (0.3, 0.6, 0.8, 0.95, 0.40, 0.20),
script = "./main.js",
dependencies = c("dat.gui.js", "d3.min.js", "cartogram-chart@1", "d3-scale-chromatic")
)
r2d3(
data = c (0.3, 0.6, 0.8, 0.95, 0.40, 0.20),
script = "./main.js",
dependencies = c("./dat.gui.js", "./d3.min.js", "./cartogram-chart@1", "./d3-scale-chromatic")
)
r2d3(
data = c (0.3, 0.6, 0.8, 0.95, 0.40, 0.20),
script = "./main.js",
dependencies = c("./dat.gui.js", "./d3.min.js", "./cartogram-chart@1", "./d3-scale-chromatic")
)
r2d3(
data = c (0.3, 0.6, 0.8, 0.95, 0.40, 0.20),
script = "./main.js",
dependencies = c("./dat.gui.js", "./d3.min.js", "./cartogram-chart@1", "./d3-scale-chromatic")
)
r2d3(
data = c (0.3, 0.6, 0.8, 0.95, 0.40, 0.20),
script = "./main.js",
dependencies = list.files(full.names = TRUE)
)
r2d3(
data = c (0.3, 0.6, 0.8, 0.95, 0.40, 0.20),
script = "./main.js",
dependencies = list.files(full.names = TRUE)
)
r2d3(
data = c (0.3, 0.6, 0.8, 0.95, 0.40, 0.20),
script = "./main.js",
dependencies = list.files(full.names = TRUE)
)
r2d3(
data = c (0.3, 0.6, 0.8, 0.95, 0.40, 0.20),
script = "./main.js",
dependencies = list.files(full.names = TRUE)
)
library(r2d3)
bars <- c(10, 20, 30)
library(r2d3)
r2d3(
data = c (0.3, 0.6, 0.8, 0.95, 0.40, 0.20),
script = "./main.js",
dependencies = list.files(full.names = TRUE)
)
list.files(full.names = TRUE)
r2d3(
data = c (0.3, 0.6, 0.8, 0.95, 0.40, 0.20),
script = "./main.js",
dependencies = list.files(full.names = TRUE)[-11]
)
r2d3(
data = c (0.3, 0.6, 0.8, 0.95, 0.40, 0.20),
script = "./main.js",
dependencies = "./cartogram-chart@1"
)
r2d3(
data = c (0.3, 0.6, 0.8, 0.95, 0.40, 0.20),
script = "./main.js",
dependencies = "./cartogram-chart@1"
)
r2d3(
data = c (0.3, 0.6, 0.8, 0.95, 0.40, 0.20),
script = "./main.js",
dependencies = list.files(full.names = TRUE)[-11]
)
#  dependencies = c("./dat.gui.js", "./d3.min.js", "./cartogram-chart@1", "./d3-scale-chromatic")
rmarkdown::html_dependency_jquery()
#  dependencies = c("./dat.gui.js", "./d3.min.js", "./cartogram-chart@1", "./d3-scale-chromatic")
rmarkdown::html_dependency_jquery()
#  dependencies = c("./dat.gui.js", "./d3.min.js", "./cartogram-chart@1", "./d3-scale-chromatic")
dasda < rmarkdown::html_dependency_jquery()
#  dependencies = c("./dat.gui.js", "./d3.min.js", "./cartogram-chart@1", "./d3-scale-chromatic")
dasda < rmarkdown::html_dependency_jquery()
#  dependencies = c("./dat.gui.js", "./d3.min.js", "./cartogram-chart@1", "./d3-scale-chromatic")
dasda < -rmarkdown::html_dependency_jquery()
#  dependencies = c("./dat.gui.js", "./d3.min.js", "./cartogram-chart@1", "./d3-scale-chromatic")
dasda <-rmarkdown::html_dependency_jquery()
dasda
dasda$name
dasda$script
r2d3(
data = c (0.3, 0.6, 0.8, 0.95, 0.40, 0.20),
script = "./main.js",
dependencies = list.files(full.names = TRUE)
)
r2d3(
data = c (0.3, 0.6, 0.8, 0.95, 0.40, 0.20),
script = "./main.js",
dependencies = list.files(full.names = TRUE)[-11]
)
list.files(full.names = TRUE)[-11]
list.files(full.names = TRUE)[-11]
r2d3(
data = c (0.3, 0.6, 0.8, 0.95, 0.40, 0.20),
script = "./main.js",
dependencies = list.files(full.names = TRUE)[-11]
)
library(shiny)
shinyUI(fluidPage(
titlePanel("Uploading Files"),
mainPanel(
htmlOutput("inc")
)
))
shinyServer(function(input, output) {
getPage<-function() {
return(includeHTML("include.html"))
}
output$inc<-renderUI({getPage()})
})
#  ----- server.R -----
setwd("..")
shinyUI(fluidPage(
titlePanel("Uploading Files"),
mainPanel(
htmlOutput("inc")
)
))
#  ----- server.R -----
shinyServer(function(input, output) {
getPage<-function() {
return(includeHTML("carto_demo.html"))
}
output$inc<-renderUI({getPage()})
})
#  ----- server.R -----
shinyServer(function(input, output) {
getPage<-function() {
return(includeHTML("carto_demo.html"))
}
output$inc<-renderUI({getPage()})
})
#  ----- server.R -----
shinyServer(function(input, output) {
getPage<-function() {
return(includeHTML("carto_demo.html"))
}
output$inc<-renderUI({getPage()})
})
#  ----- server.R -----
shinyServer(function(input, output) {
getPage<-function() {
return(includeHTML("carto_demo.html"))
}
output$inc<-renderUI({getPage()})
})
server
#  ----- server.R -----
shinyServer(function(input, output) {
getPage<-function() {
return(includeHTML("carto_demo.html"))
}
output$inc<-renderUI({getPage()})
}
shinyApp(ui, server)
)
#  ----- server.R -----
shinyServer(function(input, output) {
getPage<-function() {
return(includeHTML("carto_demo.html"))
}
output$inc<-renderUI({getPage()})
}
)
#  ----- server.R -----
das <- shinyServer(function(input, output) {
getPage<-function() {
return(includeHTML("carto_demo.html"))
}
output$inc<-renderUI({getPage()})
}
)
das
ui <- shinyUI(fluidPage(
titlePanel("Uploading Files"),
mainPanel(
htmlOutput("inc")
)
))
#  ----- server.R -----
server <- shinyServer(function(input, output) {
getPage<-function() {
return(includeHTML("carto_demo.html"))
}
output$inc<-renderUI({getPage()})
}
)
shinyApp(ui, server)
shinyApp(ui, server)
